#1
model0 = make_pipeline( linear_model.LinearRegression())
model0.fit(X_train, y_train)
model0.predict(X_test)
print("linear")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model0.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model0.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model0.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model0.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model0.predict(X_test)) ))

model2= make_pipeline(PolynomialFeatures(2), linear_model.LinearRegression())
model2.fit(X_train, y_train)
model2.predict(X_test)
print("2nd degree")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model2.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model2.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model2.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model2.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model2.predict(X_test)) ))

model3= make_pipeline(PolynomialFeatures(3), linear_model.LinearRegression())
model3.fit(X_train, y_train)
model3.predict(X_test)
print("3rd degree")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model3.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model3.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model3.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model3.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model3.predict(X_test)) ))

model4= make_pipeline(PolynomialFeatures(4), linear_model.LinearRegression())
model4.fit(X_train, y_train)
model4.predict(X_test)
print("4th degree")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model4.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model4.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model4.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model4.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model4.predict(X_test)) ))


model5= make_pipeline(PolynomialFeatures(5), linear_model.LinearRegression())
model5.fit(X_train, y_train)
model5.predict(X_test)
print("5th degree")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model5.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model5.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model5.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model5.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model5.predict(X_test)) ))

model25= make_pipeline(PolynomialFeatures(25), linear_model.LinearRegression())
model25.fit(X_train, y_train)
model25.predict(X_test)
print("5th degree")
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model25.predict(X_test)) ))
print("Explained variance score: {}".format( metrics.explained_variance_score(y_test, model25.predict(X_test)) ))
print("Median absolute error: {}".format( metrics.median_absolute_error(y_test, model25.predict(X_test)) ))
print("Mean squared error: {}".format( metrics.mean_squared_error(y_test, model25.predict(X_test)) ))
print("Mean absolute errors: {}".format(metrics.mean_absolute_error(y_test, model25.predict(X_test)) ))